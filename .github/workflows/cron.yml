name: Birthday Notifications
on:
  schedule:
    - cron: '0 0,6,12,18 * * *'
  workflow_dispatch:

jobs:
  send-notifications:
    runs-on: ubuntu-latest
    env:
      NEXT_PUBLIC_SUPABASE_URL: ${{ secrets.NEXT_PUBLIC_SUPABASE_URL }}
      SUPABASE_SERVICE_ROLE_KEY: ${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}
    steps:
      - name: Check environment variables
        run: |
          if [ -z "$NEXT_PUBLIC_SUPABASE_URL" ]; then
            echo "Error: NEXT_PUBLIC_SUPABASE_URL is not set"
            exit 1
          fi
          if [ -z "$SUPABASE_SERVICE_ROLE_KEY" ]; then
            echo "Error: SUPABASE_SERVICE_ROLE_KEY is not set"
            exit 1
          fi

      - name: Send birthday notifications
        id: send_notifications
        run: |
          echo "Checking for birthdays today..."
          
          # Determine trigger type
          TRIGGER_TYPE="${{ github.event_name }}"
          
          # Form URL based on trigger type
          if [ "$TRIGGER_TYPE" = "workflow_dispatch" ]; then
            echo "Manual trigger detected - sending notifications if there are birthdays today"
            API_URL='https://digital-birthday-reminder.vercel.app/api/send-notifications?force=true'
          else
            echo "Scheduled trigger detected - running normal check"
            API_URL='https://digital-birthday-reminder.vercel.app/api/send-notifications'
          fi
          
          # Send request with authentication headers and verbose output
          echo "Sending request to: $API_URL"
          RESPONSE=$(curl -L -X POST "$API_URL" \
          -H 'Content-Type: application/json' \
          -H "Authorization: Bearer $SUPABASE_SERVICE_ROLE_KEY" \
          -H "x-supabase-url: $NEXT_PUBLIC_SUPABASE_URL" \
          -v \
          -w "\nHTTP_STATUS:%{http_code}" \
          -s)
          
          HTTP_STATUS=$(echo "$RESPONSE" | grep "HTTP_STATUS:" | cut -d":" -f2)
          API_RESPONSE=$(echo "$RESPONSE" | grep -v "HTTP_STATUS:")
          
          echo "Full response headers and details:"
          echo "$RESPONSE"
          echo "Status code: $HTTP_STATUS"
          
          # Only show error message, not the full response which might contain sensitive info
          if [ "$HTTP_STATUS" != "200" ]; then
            echo "API request failed with status $HTTP_STATUS"
            exit 1
          fi
